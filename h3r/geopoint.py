import numpy as np


class GeoLatLng:
    def __init__(self, lat, lng, using_rad=False):
        if using_rad:
            self.lat_rad = lat
            self.lng_rad = lng
            self.lat = np.rad2deg(lat)
            self.lng = np.rad2deg(lng)
        else:
            self.lat = lat
            self.lng = lng
            self.lat_rad = np.deg2rad(lat)
            self.lng_rad = np.deg2rad(lng)

    def toXYZ(self):
        r = np.cos(self.lat_rad)
        z = np.sin(self.lat_rad)
        x = np.cos(self.lng_rad) * r
        y = np.sin(self.lng_rad) * r
        return np.array([x, y, z])

    def toGeoXYZ(self):
        d = self.toXYZ()
        return GeoXYZ(d[0], d[1], d[2])

    def __repr__(self):
        return "[{}, {}]".format(self.lng, self.lat)

    def toList(self):
        return [self.lng, self.lat]


class GeoXYZ:
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def toGeoLatLng(self):
        lat_rad = np.arcsin(self.z)
        lng_rad = np.arctan2(self.y, self.x)
        return GeoLatLng(lat_rad, lng_rad, using_rad=True)


# https://github.com/uber/h3/blob/master/src/h3lib/lib/faceijk.c
h3_faceCenterGeo = [
    [0.803582649718989942, 1.248397419617396099],
    [1.307747883455638156, 2.536945009877921159],
    [1.054751253523952054, -1.347517358900396623],
    [0.600191595538186799, -0.450603909469755746],
    [0.491715428198773866, 0.401988202911306943],
    [0.172745327415618701, 1.678146885280433686],
    [0.605929321571350690, 2.953923329812411617],
    [0.427370518328979641, -1.888876200336285401],
    [-0.079066118549212831, -0.733429513380867741],
    [-0.230961644455383637, 0.506495587332349035],
    [0.079066118549212831, 2.408163140208925497],
    [0.230961644455383637, -2.635097066257444203],
    [-0.172745327415618701, -1.463445768309359553],
    [-0.605929321571350690, -0.187669323777381622],
    [-0.427370518328979641, 1.252716453253507838],
    [-0.600191595538186799, 2.690988744120037492],
    [-0.491715428198773866, -2.739604450678486295],
    [-0.803582649718989942, -1.893195233972397139],
    [-1.307747883455638156, -0.604647643711872080],
    [-1.054751253523952054, 1.794075294689396615],
]

H3_faceCenterPoint = [
    [0.2199307791404606, 0.6583691780274996, 0.7198475378926182],
    [-0.2139234834501421, 0.1478171829550703, 0.9656017935214205],
    [0.1092625278784797, -0.4811951572873210, 0.8697775121287253],
    [0.7428567301586791, -0.3593941678278028, 0.5648005936517033],
    [0.8112534709140969, 0.3448953237639384, 0.4721387736413930],
    [-0.1055498149613921, 0.9794457296411413, 0.1718874610009365],
    [-0.8075407579970092, 0.1533552485898818, 0.5695261994882688],
    [-0.2846148069787907, -0.8644080972654206, 0.4144792552473539],
    [0.7405621473854482, -0.6673299564565524, -0.0789837646326737],
    [0.8512303986474293, 0.4722343788582681, -0.2289137388687808],
    [-0.7405621473854481, 0.6673299564565524, 0.0789837646326737],
    [-0.8512303986474292, -0.4722343788582682, 0.2289137388687808],
    [0.1055498149613919, -0.9794457296411413, -0.1718874610009365],
    [0.8075407579970092, -0.1533552485898819, -0.5695261994882688],
    [0.2846148069787908, 0.8644080972654204, -0.4144792552473539],
    [-0.7428567301586791, 0.3593941678278027, -0.5648005936517033],
    [-0.8112534709140971, -0.3448953237639382, -0.4721387736413930],
    [-0.2199307791404607, -0.6583691780274996, -0.7198475378926182],
    [0.2139234834501420, -0.1478171829550704, -0.9656017935214205],
    [-0.1092625278784796, 0.4811951572873210, -0.8697775121287253],
]


def get_closest_face_center(p: GeoLatLng) -> GeoLatLng:
    closest_idx = 0
    closest_measure = 5.0
    p_position = [p.lat_rad, p.lng_rad]
    for idx, c in enumerate(h3_faceCenterGeo):
        d = 0
        for i in range(2):
            d += (p_position[i] - c[i]) ** 2
        if d < closest_measure:
            closest_measure = d
            closest_idx = idx

    return GeoLatLng(*h3_faceCenterGeo[closest_idx], using_rad=True)
